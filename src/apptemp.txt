import { useState, useEffect } from "react";
import { Trash2, CheckCircle, Circle, Edit } from "lucide-react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import "./App.css"; 
import Login from "./Login";
import Register from "./Register";
import Reset from "./Reset";
import Dashboard from "./Dashboard";

export default function TodoList() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");
  const [editingIndex, setEditingIndex] = useState(null);
  const [filter, setFilter] = useState("all");

  // Load tasks from local storage on component mount
  useEffect(() => {
    const savedTasks = JSON.parse(localStorage.getItem("tasks"));
    if (savedTasks) {
      setTasks(savedTasks);
    }
  }, []);

  // Save tasks to local storage whenever tasks change
  useEffect(() => {
    localStorage.setItem("tasks", JSON.stringify(tasks));
  }, [tasks]);

  const addTask = () => {
    if (newTask.trim() !== "") {
      const updatedTasks = [...tasks, { text: newTask, completed: false }];
      setTasks(updatedTasks);
      setNewTask("");
    }
  };

  const editTask = (index) => {
    setNewTask(tasks[index].text);
    setEditingIndex(index);
  };

  const updateTask = () => {
    if (newTask.trim() !== "" && editingIndex !== null) {
      const updatedTasks = tasks.map((task, index) =>
        index === editingIndex ? { ...task, text: newTask } : task
      );
      setTasks(updatedTasks);
      setNewTask("");
      setEditingIndex(null);
    }
  };

  const removeTask = (index) => {
    setTasks(tasks.filter((_, i) => i !== index));
  };

  const toggleTaskCompletion = (index) => {
    setTasks(
      tasks.map((task, i) =>
        i === index ? { ...task, completed: !task.completed } : task
      )
    );
  };

  const filteredTasks = tasks.filter((task) => {
    if (filter === "completed") return task.completed;
    if (filter === "active") return !task.completed;
    return true; // all
  });

  return (
    <div className="app">
      <Router>
        <Routes>
          <Route path="/" element={<Login />} />
          <Route exact path="/register" element={<Register />} />
          <Route exact path="/reset" element={<Reset />} />
          <Route exact path="/dashboard" element={<Dashboard />} />
        </Routes>
      </Router>

      <div className="max-w-md mx-auto p-4">
        <h1 className="text-xl font-bold mb-4">To-Do List</h1>
        <div className="flex gap-2 mb-4">
          <input
            className="border p-2 w-full rounded"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
            placeholder="Enter a task..."
          />
          <button
            className="bg-blue-500 text-white px-4 py-2 rounded"
            onClick={editingIndex !== null ? updateTask : addTask}
          >
            {editingIndex !== null ? "Update" : "Add"}
          </button>
        </div>
        <div className="mb-4">
          <label className="mr-2">Filter: </label>
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="border p-2 rounded"
          >
            <option value="all">All</option>
            <option value="active">Active</option>
            <option value="completed">Completed</option>
          </select>
        </div>
        <div className="space-y-2">
          {filteredTasks.map((task, index) => (
            <div key={index} className="flex justify-between items-center p-2 border rounded">
              <button onClick={() => toggleTaskCompletion(index)}>
                {task.completed ? (
                  <CheckCircle className="w-5 h-5 text-green-500" />
                ) : (
                  <Circle className="w-5 h-5 text-gray-400" />
                )}
              </button>
              <span className={task.completed ? "line-through text-gray-500" : ""}>
                {task.text}
              </span>
              <div className="flex gap-2">
                <button className="text-yellow-500" onClick={() => editTask(index)}>
                  <Edit className="w-4 h-4" />
                </button>
                <button 
                  className="text-red-500" 
                  onClick={() => removeTask(index)}
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
  ))}
        </div>
        <div className="mt-4">
          <span className="font-bold">
            {tasks.filter(task => !task.completed).length} tasks remaining
          </span>
        </div>
      </div>
    </div>
  );
}